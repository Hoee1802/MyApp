/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef HARDSCREENVIEWBASE_HPP
#define HARDSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/hardscreen_screen/HardScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/mixins/Draggable.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>

class HardScreenViewBase : public touchgfx::View<HardScreenPresenter>
{
public:
    HardScreenViewBase();
    virtual ~HardScreenViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image2_1;
    touchgfx::Box box3;
    touchgfx::Box box1;
    touchgfx::Box box2;
    touchgfx::Circle ball;
    touchgfx::PainterRGB565 ballPainter;
    touchgfx::Draggable< touchgfx::Box > paddle1;
    touchgfx::Draggable< touchgfx::Box > paddle2;
    touchgfx::TextAreaWithOneWildcard score2;
    touchgfx::TextAreaWithOneWildcard score1;
    touchgfx::TextArea player1;
    touchgfx::TextArea player2;
    touchgfx::BoxWithBorder goal1;
    touchgfx::BoxWithBorder goal2;
    touchgfx::Image image1;
    touchgfx::Image image1_1;
    touchgfx::Image image2;
    touchgfx::Image image2_2;

    /*
     * Wildcard Buffers
     */
    static const uint16_t SCORE2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar score2Buffer[SCORE2_SIZE];
    static const uint16_t SCORE1_SIZE = 10;
    touchgfx::Unicode::UnicodeChar score1Buffer[SCORE1_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 4800;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

};

#endif // HARDSCREENVIEWBASE_HPP
